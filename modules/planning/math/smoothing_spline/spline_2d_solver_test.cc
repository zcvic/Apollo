/******************************************************************************
 * Copyright 2017 The Apollo Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *****************************************************************************/

/**
 * @file
 **/
#include "modules/planning/math/smoothing_spline/spline_2d_solver.h"

#include "gtest/gtest.h"

#include "modules/planning/math/curve_math.h"

namespace apollo {
namespace planning {

using apollo::common::math::Vec2d;
using Eigen::MatrixXd;

TEST(constraint_test, test_suit_one) {
  std::vector<double> t_knots{0, 1, 2, 3, 4, 5};
  std::size_t order = 6;
  Spline2dSolver spline_solver(t_knots, order);

  Spline2dConstraint* constraint = spline_solver.mutable_constraint();
  Spline2dKernel* kernel = spline_solver.mutable_kernel();

  std::vector<double> et{0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5};
  std::vector<double> bound(11, 0.2);
  std::vector<std::vector<double> > constraint_data{
      {-1.211566924, 434592.7844, 4437011.568},
      {-1.211572116, 434594.6884, 4437006.498},
      {-1.21157766, 434596.5923, 4437001.428},
      {-1.211571616, 434598.4962, 4436996.358},
      {-1.21155227, 434600.4002, 4436991.288},
      {-1.211532017, 434602.3043, 4436986.218},
      {-1.21155775, 434604.2083, 4436981.148},
      {-1.211634014, 434606.1122, 4436976.077},
      {-1.211698593, 434608.0156, 4436971.007},
      {-1.211576177, 434609.9191, 4436965.937},
      {-1.211256197, 434611.8237, 4436960.867}};
  std::vector<double> angle;
  std::vector<Vec2d> ref_point;

  for (std::size_t i = 0; i < 11; ++i) {
    angle.push_back(constraint_data[i][0]);
    Vec2d prev_point(constraint_data[i][1], constraint_data[i][2]);

    Vec2d new_point = prev_point;
    ref_point.emplace_back(new_point.x(), new_point.y());
    std::cout << std::setprecision(10) << new_point.x() << "\t" << new_point.y()
              << std::endl;
  }

  EXPECT_TRUE(constraint->Add2dBoundary(et, angle, ref_point, bound, bound));
  EXPECT_TRUE(constraint->AddThirdDerivativeSmoothConstraint());
  kernel->AddThirdOrderDerivativeMatrix(100);
  // kernel->add_second_order_derivative_matrix(100);
  // kernel->add_derivative_kernel_matrix(100);

  kernel->AddRegularization(0.1);
  // constraint->add_point_angle_constraint(0, -1.21);
  EXPECT_TRUE(spline_solver.Solve());

  MatrixXd gold_res(51, 6);
  // clang-format off
  gold_res <<
-1.2115368418862475508,  434592.66747698473046,   4437011.3104558121413,   3.8080526262802365522,   -10.139728376595771309,  -4.9702648857932565961e-06, // NOLINT
-1.2115424150235605261,  434593.04828098183498,   4437010.2964778374881,   3.8080266332729060252,   -10.139830858844256056,  -5.2509630675682246004e-06, // NOLINT
-1.2115480798927868999,  434593.42908218299272,   4437009.282489891164 ,   3.8079967987490150882,   -10.139925940793702352,  -5.1523371106447978326e-06, // NOLINT
-1.2115534671144376766,  434593.8098802366294 ,   4437008.2684932164848,   3.8079638239910358344,   -10.14000410921839368 ,  -4.7509896533849599239e-06, // NOLINT
-1.2115582902595287695,  434594.19067487603752,   4437007.254489841871 ,   3.8079287055702373266,   -10.140059192149990963,  -4.123500700222895863e-06 , // NOLINT
-1.2115623458325166517,  434594.57146594900405,   4437006.2404822455719,   3.8078927353466851535,   -10.140088358877525465,  -3.3464291537136964423e-06, // NOLINT
-1.2115655132572307195,  434594.9522534472635 ,   4437005.226473021321 ,   3.8078575004692409856,   -10.140092119947397009,  -2.4963192012444835819e-06, // NOLINT
-1.2115677548685177545,  434595.33303753600921,   4437004.2124645439908,   3.8078248833755639069,   -10.140074327163381085,  -1.6497091579228948387e-06, // NOLINT
-1.2115691159105776986,  434595.71381858346285,   4437003.1984586380422,   3.8077970617921077512,   -10.14004217358662352 ,  -8.8314036814620695629e-07, // NOLINT
-1.2115697245412437866,  434596.09459719032748,   4437002.1844562403858,   3.8077765087341242101,   -10.14000619353564403 ,  -2.7316376840557949442e-07, // NOLINT
-1.211569791839721022 ,  434596.47537421947345,   4437001.1704570678994,   3.8077659925056606127,   -10.139980262586329118,  1.0365828687662026406e-07, // NOLINT
-1.2115695060985147702,  434596.85615080711432,   4437000.1564594116062,   3.8077678517194883945,   -10.139976409863585616,  4.6412571210814590817e-07, // NOLINT
-1.2115687107805523937,  434597.23692818870768,   4436999.1424612496048,   3.8077816738825793763,   -10.139988713917468033,  1.0340868223519820299e-06, // NOLINT
-1.2115672130892753966,  434597.61770749930292,   4436998.1284614410251,   3.807806214006317802 ,   -10.140007919100403555,  1.7505463558425376653e-06, // NOLINT
-1.2115648884565515253,  434597.99848974263296,   4436997.1144596887752,   3.8078400829679850403,   -10.140026488025844387,  2.5505135843298106123e-06, // NOLINT
-1.2115616805386582033,  434598.379275775922  ,   4436996.1004563607275,   3.8078817475107644697,   -10.140038601568267751,  3.3710037370309890182e-06, // NOLINT
-1.211557601212516655 ,  434598.76006629620679,   4436995.0864523220807,   3.8079295302437428106,   -10.140040158863181219,  4.1490366602621973563e-06, // NOLINT
-1.2115527305737872066,  434599.14086182537721,   4436994.0724487621337,   3.807981609641907017 ,   -10.140028777307119157,  4.8216336640292258795e-06, // NOLINT
-1.2115472169377325962,  434599.52166269597365,   4436993.058447021991 ,   3.8080360200461473852,   -10.140003792557640949,  5.3258135068487697636e-06, // NOLINT
-1.2115412768430893209,  434599.90246903692605,   4436992.0444484241307,   3.8080906516632553327,   -10.139966258533338106,  5.5985884698520919101e-06, // NOLINT
-1.2115351950584789531,  434600.28328075871104,   4436991.030454098247 ,   3.8081432505659322807,   -10.139918947413825379,  5.5769614711354285251e-06, // NOLINT
-1.2115294702178893704,  434600.66409751243191,   4436990.0164647698402,   3.8081903560489172023,   -10.139868006556907787,  4.8077525402635654686e-06, // NOLINT
-1.2115251375334650241,  434601.04491840646369,   4436989.0024801855907,   3.8082248240219498392,   -10.139826305576765009,  3.0485984624858255418e-06, // NOLINT
-1.2115231320939512383,  434601.42574184061959,   4436987.9884988050908,   3.8082402597590161442,   -10.139805624164219822,  5.5274685562933367072e-07, // NOLINT
-1.2115241146652191429,  434601.80656567495316,   4436986.9745180690661,   3.8082322583733034804,   -10.139814589251253452,  -2.4265134103427337994e-06, // NOLINT
-1.2115284716620000616,  434602.18738742836285,   4436985.960534713231 ,   3.8081984048172041746,   -10.139858675011005573,  -5.6358602274154183547e-06, // NOLINT
-1.2115363151302753764,  434602.56820447777864,   4436984.9465450821444,   3.8081382738823110756,   -10.139940202857776086,  -8.8219582361918708546e-06, // NOLINT
-1.2115474827469217001,  434602.94901425717399,   4436983.9325454486534,   3.8080534301994206636,   -10.140058341447023338,  -1.1731485255929653195e-05, // NOLINT
-1.2115615378392210477,  434603.32981445634505,   4436982.9185323230922,   3.8079474282385321615,   -10.140209106675365902,  -1.4111159627665016442e-05, // NOLINT
-1.2115777694228548889,  434603.71060322015546,   4436981.9045027736574,   3.8078258123088466469,   -10.1403853616805808  ,  -1.5707762940072372626e-05, // NOLINT
-1.2115951922530028284,  434604.09137934725732,   4436980.8904547402635,   3.8076961165587666081,   -10.140576816841607055,  -1.6268152609087622892e-05, // NOLINT
-1.2116125889745430477,  434604.4721424690797 ,   4436979.876387372613 ,   3.8075670314105805048,   -10.140769106924773624,  -1.5673642702269795511e-05, // NOLINT
-1.2116287906651357353,  434604.85289298970019,   4436978.8623015237972,   3.8074450078821704402,   -10.140943390877158237,  -1.4090315165872888909e-05, // NOLINT
-1.211642820407574872 ,  434605.23363187833456,   4436977.848199846223 ,   3.8073351920638884849,   -10.141083265008450809,  -1.1692165480734368013e-05, // NOLINT
-1.2116538896775179701,  434605.61436058417894,   4436976.8340864367783,   3.8072420349382958271,   -10.141176277933361405,  -8.6530856065791103755e-06, // NOLINT
-1.2116613982673027916,  434605.99508096661884,   4436975.819966440089 ,   3.8071692923801592201,   -10.141213930571627344,  -5.1468712915184366277e-06, // NOLINT
-1.2116649342222203245,  434606.37579522596207,   4436974.8058456517756,   3.8071200251564545347,   -10.141191676148009648,  -1.3472469824589008063e-06, // NOLINT
-1.2116642737999785417,  434606.75650583376409,   4436973.791730126366 ,   3.807096598926364539 ,   -10.141108920192296594,  2.5720974864730999782e-06, // NOLINT
-1.2116593814598928258,  434607.13721546356101,   4436972.7776257768273,   3.8071006842412793425,   -10.140969020539298384,  6.4374642442461300765e-06, // NOLINT
-1.2116504098841329728,  434607.51792692096205,   4436971.7635379871354,   3.8071332565447981722,   -10.140779287328856029,  1.0075104586263126352e-05, // NOLINT
-1.2116377000291600474,  434607.89864307461539,   4436970.7494712099433,   3.8071945961727258201,   -10.140550983005825358,  1.3311181847038190633e-05, // NOLINT
-1.2116217746264363875,  434608.27936676866375,   4436969.7354286238551,   3.8072835986308652956,   -10.140297282714746174,  1.5999713733752306759e-05, // NOLINT
-1.211603234017627484 ,  434608.66010057675885,   4436968.7214123532176,   3.8073960893857381471,   -10.140025574397215635,  1.8150708571146405821e-05, // NOLINT
-1.2115826280040176144,  434609.04084661882371,   4436967.7074239430949,   3.8075275649565769598,   -10.139740810706545204,  1.982423262951279921e-05,  // NOLINT
-1.2115604412922547084,  434609.42160658718785,   4436966.6934644859284,   3.807673978626872735 ,   -10.139447153341473395,  2.1080357871403058903e-05, // NOLINT
-1.2115370934885081322,  434609.80238179233856,   4436965.6795346960425,   3.8078317404443748906,   -10.139147973046169326,  2.197916746124240728e-05,  // NOLINT
-1.2115129390891998806,  434610.18317320861388,   4436964.6656349888071,   3.8079977172210925929,   -10.138845849610234495,  2.2580759491079575765e-05, // NOLINT
-1.2114882674694991138,  434610.56398151989561,   4436963.6517655635253,   3.8081692325332925364,   -10.13854257186870278 ,  2.2945249260006103398e-05, // NOLINT
-1.211463302870517289 ,  434610.94480716524413,   4436962.6379264788702,   3.8083440667215011644,   -10.138239137702035109,  2.3132770444999757836e-05, // NOLINT
-1.211438204385904216 ,  434611.32565038459143,   4436961.6241177329794,   3.8085204568905028921,   -10.137935754036126568,  2.3203475501163622012e-05, // NOLINT
-1.2114130659482946761,  434611.70651126443408,   4436960.6103393444791,   3.8086970969093409956,   -10.137631836842297517,  2.3217535629534088597e-05; // NOLINT
  // clang-format on

  double t = 0;
  for (int i = 0; i < 51; ++i) {
    auto xy = spline_solver.spline()(t);
    const double heading = std::atan2(spline_solver.spline().derivative_y(t),
                                      spline_solver.spline().DerivativeX(t));
    const double kappa = CurveMath::ComputeCurvature(
        spline_solver.spline().DerivativeX(t),
        spline_solver.spline().SecondDerivativeX(t),
        spline_solver.spline().derivative_y(t),
        spline_solver.spline().second_derivative_y(t));
    std::cout << std::setprecision(20) << heading << "\t" << xy.first << "\t"
              << xy.second << "\t" << spline_solver.spline().DerivativeX(t)
              << "\t" << spline_solver.spline().derivative_y(t) << "\t" << kappa
              << std::endl;
    EXPECT_NEAR(heading, gold_res(i, 0), 1e-10);
    EXPECT_NEAR(xy.first, gold_res(i, 1), 1e-10);
    EXPECT_NEAR(xy.second, gold_res(i, 2), 1e-10);
    EXPECT_NEAR(spline_solver.spline().DerivativeX(t), gold_res(i, 3), 1e-10);
    EXPECT_NEAR(spline_solver.spline().derivative_y(t), gold_res(i, 4), 1e-10);
    EXPECT_NEAR(kappa, gold_res(i, 5), 1e-10);
    t += 0.1;
  }
}

}  // namespace planning
}  // namespace apollo
