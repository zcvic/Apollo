syntax = "proto2";

package apollo.planning;

import "modules/planning/proto/decider_config.proto";
import "modules/planning/proto/dp_poly_path_config.proto";
import "modules/planning/proto/dp_st_speed_config.proto";
import "modules/planning/proto/open_space_fallback_decider_config.proto";
import "modules/planning/proto/open_space_roi_decider_config.proto";
import "modules/planning/proto/open_space_trajectory_provider_config.proto";
import "modules/planning/proto/open_space_trajectory_partition_config.proto";
import "modules/planning/proto/path_bound_decider_config.proto";
import "modules/planning/proto/piecewise_jerk_path_config.proto";
import "modules/planning/proto/proceed_with_caution_speed_config.proto";
import "modules/planning/proto/planner_open_space_config.proto";
// import "modules/planning/proto/poly_vt_speed_config.proto";
import "modules/planning/proto/qp_piecewise_jerk_path_config.proto";
import "modules/planning/proto/qp_spline_path_config.proto";
import "modules/planning/proto/qp_st_speed_config.proto";
import "modules/planning/proto/speed_bounds_decider_config.proto";
import "modules/planning/proto/side_pass_path_decider_config.proto";
import "modules/planning/proto/navi_path_decider_config.proto";
import "modules/planning/proto/navi_speed_decider_config.proto";
import "modules/planning/proto/navi_obstacle_decider_config.proto";

message PathDeciderConfig {
  // place holder
}

// Planning's configuration is based on the following architecture
// * Scenario has one more multiple stages
// * a stage has one or

// tasks are shared among all scenarios and stages.
message TaskConfig {
  enum TaskType {
    DP_POLY_PATH_OPTIMIZER = 0;
    DP_ST_SPEED_OPTIMIZER = 1;
    QP_SPLINE_PATH_OPTIMIZER = 2;
    QP_SPLINE_ST_SPEED_OPTIMIZER = 3;
    PATH_DECIDER = 4;
    SPEED_DECIDER = 5;
    POLY_ST_SPEED_OPTIMIZER = 6;
    NAVI_PATH_DECIDER = 7;
    NAVI_SPEED_DECIDER = 8;
    NAVI_OBSTACLE_DECIDER = 9;
    QP_PIECEWISE_JERK_PATH_OPTIMIZER = 10;
    DECIDER_CREEP = 11;
    DECIDER_RULE_BASED_STOP = 12;
    SIDE_PASS_PATH_DECIDER = 13;
    SIDE_PASS_SAFETY = 14;
    PROCEED_WITH_CAUTION_SPEED = 15;
    DECIDER_RSS = 16;
    SPEED_BOUNDS_PRIORI_DECIDER = 17;
    SPEED_BOUNDS_FINAL_DECIDER = 18;
    PIECEWISE_JERK_PATH_OPTIMIZER = 19;
    PATH_BOUND_DECIDER = 20;
    OPEN_SPACE_FALLBACK_DECIDER = 21;
    OPEN_SPACE_ROI_DECIDER = 22;
    OPEN_SPACE_TRAJECTORY_PROVIDER = 23;
    OPEN_SPACE_TRAJECTORY_PARTITION = 24;
  };
  optional TaskType task_type = 1;
  oneof task_config {
    DpPolyPathConfig dp_poly_path_config = 2;
    DpStSpeedConfig dp_st_speed_config = 3;
    QpSplinePathConfig qp_spline_path_config = 4;
    QpStSpeedConfig qp_st_speed_config = 5;
    PathDeciderConfig path_decider_config = 7;
    ProceedWithCautionSpeedConfig proceed_with_caution_speed_config = 8;
    QpPiecewiseJerkPathConfig qp_piecewise_jerk_path_config = 9;
    DeciderCreepConfig decider_creep_config = 10;
    DeciderRuleBasedStopConfig decider_rule_based_stop_config = 11;
    SidePassSafetyConfig side_pass_safety_config = 12;
    SidePassPathDeciderConfig side_pass_path_decider_config = 13;
    // PolyVTSpeedConfig poly_vt_speed_config = 14;
    SpeedBoundsDeciderConfig speed_bounds_decider_config = 15;
    PiecewiseJerkPathConfig piecewise_jerk_path_config = 16;
    PathBoundDeciderConfig path_bound_decider_config = 17;
    OpenSpaceFallBackDeciderConfig open_space_fallback_decider_config = 18;
    OpenSpaceRoiDeciderConfig open_space_roi_decider_config = 19;
    OpenSpaceTrajectoryProviderConfig open_space_trajectory_provider_config = 20;
    OpenSpaceTrajectoryPartitionConfig open_space_trajectory_partition_config = 21;
  }
}

message ScenarioLaneFollowConfig {
}

message ScenarioSidePassConfig {
  optional double side_pass_exit_distance = 1 [default = 10.0];
  optional double approach_obstacle_max_stop_speed = 2 [default = 1.0e-5];
  optional double approach_obstacle_min_stop_distance = 3 [default = 4.0];
  optional double block_obstacle_min_speed = 4 [default = 0.1]; // m/s
  // set to false to work around large vehicle splitting issue in perception
  optional bool enable_obstacle_blocked_check = 5 [default = true];
  optional uint32 max_backup_stage_cycle_num = 6 [default = 30];
  optional double min_l_nudge_buffer = 7 [default = 0.5];
  optional double min_front_obstacle_distance = 8 [default = 0.5];
  optional double max_front_obstacle_distance = 9 [default = 15.0];
  optional double stop_fence_distance_to_blocking_obstacle = 10 [default = 6.0];
}

message ScenarioStopSignUnprotectedConfig {
  optional double start_stop_sign_scenario_distance = 1 [default = 5.0];  // meter
  optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5.0];  // meter
  optional double max_valid_stop_distance = 3 [default = 3.5];  // meter
  optional double max_adc_stop_speed = 4 [default = 0.3];  // m/s
  optional float stop_duration = 5 [default = 1.0];  // sec
  optional double min_pass_s_distance = 6 [default = 3.0];  // meter
  optional float stop_timeout = 7 [default = 8.0];  // sec
  optional float creep_timeout = 8 [default = 10.0];  // sec
}

message ScenarioTrafficLightProtectedConfig {
  optional double start_traffic_light_scenario_distance = 1 [default = 5.0];  // meter
  optional double max_valid_stop_distance = 2 [default = 2.0];  // meter
  optional double max_adc_stop_speed = 3 [default = 0.3];  // m/s
  optional double min_pass_s_distance = 4 [default = 3.0];  // meter
}

message ScenarioTrafficLightUnprotectedLeftTurnConfig {
  optional double start_traffic_light_scenario_distance = 1 [default = 5.0];  // meter
  optional double max_valid_stop_distance = 2 [default = 3.5];  // meter
  optional double max_adc_stop_speed = 3 [default = 0.3];  // m/s
  optional double min_pass_s_distance = 4 [default = 3.0];  // meter
  optional float creep_timeout = 5 [default = 10.0];  // sec
}

message ScenarioTrafficLightUnprotectedRightTurnConfig {
  optional double start_traffic_light_scenario_distance = 1 [default = 5.0];  // meter
  optional double max_valid_stop_distance = 2 [default = 3.5];  // meter
  optional double max_adc_stop_speed = 3 [default = 0.3];  // m/s
  optional double min_pass_s_distance = 4 [default = 3.0];  // meter
  optional float red_light_right_turn_stop_duration = 5 [default = 3.0];  // sec
  optional float creep_timeout = 6 [default = 10.0];  // sec
}

message ScenarioValetParkingConfig {
  optional double parking_spot_range_to_start = 1 [default = 20.0];
}

message ScenarioNarrowStreetUTurnConfig {}

// scenario configs
message ScenarioConfig {
  enum ScenarioType {
    LANE_FOLLOW = 0;  // default scenario
    CHANGE_LANE = 1;
    SIDE_PASS = 2;  // go around an object when it blocks the road
    APPROACH = 3;   // approach to an intersection
    STOP_SIGN_PROTECTED = 4;
    STOP_SIGN_UNPROTECTED = 5;
    TRAFFIC_LIGHT_PROTECTED = 6;
    TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN = 7;
    TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN = 8;
    VALET_PARKING = 9;
    NARROW_STREET_U_TURN = 10;
  }

  // StageType is a superset of stages from all scenarios.
  // It is created to keep different scenarios have uniform config interface
  enum StageType {
    NO_STAGE = 0;

    LANE_FOLLOW_DEFAULT_STAGE = 1;

    STOP_SIGN_UNPROTECTED_PRE_STOP = 100;
    STOP_SIGN_UNPROTECTED_STOP = 101;
    STOP_SIGN_UNPROTECTED_CREEP = 102 ;
    STOP_SIGN_UNPROTECTED_INTERSECTION_CRUISE = 103;

    SIDE_PASS_APPROACH_OBSTACLE = 200;
    SIDE_PASS_GENERATE_PATH= 201;
    SIDE_PASS_STOP_ON_WAITPOINT = 202;
    SIDE_PASS_DETECT_SAFETY = 203;
    SIDE_PASS_PASS_OBSTACLE = 204;
    SIDE_PASS_BACKUP = 205;

    TRAFFIC_LIGHT_PROTECTED_STOP = 300;
    TRAFFIC_LIGHT_PROTECTED_INTERSECTION_CRUISE = 301;

    TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_CREEP = 310 ;
    TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_INTERSECTION_CRUISE = 311;

    TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_STOP = 320;
    TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_CREEP = 321 ;
    TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_INTERSECTION_CRUISE = 322;

    VALET_PARKING_APPROACHING_PARKING_SPOT = 401;
    VALET_PARKING_PARKING = 402;
  };

  message StageConfig {
    optional StageType stage_type = 1;
    optional bool enabled = 2 [default = true];
    // an ordered list of tasks that are used at runtime. Its order determines the runtime order of the tasks.
    repeated TaskConfig.TaskType task_type = 3;
    // an unordered task configurations
    repeated TaskConfig task_config = 4;
  }

  optional ScenarioType scenario_type = 1;
  oneof scenario_config {
    ScenarioLaneFollowConfig lane_follow_config = 2;
    ScenarioSidePassConfig side_pass_config = 3;
    ScenarioStopSignUnprotectedConfig stop_sign_unprotected_config = 4;
    ScenarioTrafficLightProtectedConfig traffic_light_protected_config = 5;
    ScenarioTrafficLightUnprotectedRightTurnConfig traffic_light_unprotected_right_turn_config = 6;
    ScenarioTrafficLightUnprotectedLeftTurnConfig traffic_light_unprotected_left_turn_config = 7;
    ScenarioValetParkingConfig valet_parking_config = 8;
    ScenarioNarrowStreetUTurnConfig narrow_street_u_turn_config = 9;
  }
  // a list of stages that are used at runtime.  The first one is default stage.
  repeated StageType stage_type = 10;
  // an unordered list of stage configs.
  repeated StageConfig stage_config = 11;
}

message PlannerPublicRoadConfig {
  // supported scenario types
  repeated ScenarioConfig.ScenarioType scenario_type = 1;
}

message PlannerNaviConfig {
  repeated TaskConfig.TaskType task = 1;
  optional NaviPathDeciderConfig navi_path_decider_config = 2;
  optional NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  optional NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
}

enum PlannerType {
  RTK = 0;
  PUBLIC_ROAD = 1;  // public road planner
  OPEN_SPACE = 2;   // open space planner
  NAVI = 3;         // navigation planner
  LATTICE = 4;      // lattice planner
}

message RtkPlanningConfig {
  optional PlannerType planner_type = 1;
}

message StandardPlanningConfig {
  repeated PlannerType planner_type = 1;  // supported planners
  optional PlannerPublicRoadConfig planner_public_road_config = 2;
}

message NavigationPlanningConfig {
  repeated PlannerType planner_type = 1;  // supported planners
  optional PlannerNaviConfig planner_navi_config = 4;
}

message OpenSpacePlanningConfig {
  repeated PlannerType planner_type = 1;  // supported planners
  optional PlannerOpenSpaceConfig planner_open_space_config = 2;
}

message PlanningConfig {
  oneof planning_config {
    RtkPlanningConfig rtk_planning_config = 1;
    StandardPlanningConfig standard_planning_config = 2;
    NavigationPlanningConfig navigation_planning_config = 3;
    OpenSpacePlanningConfig open_space_planning_config = 4;
  }

  // default task config, it will be used if there is no scenario-specific
  // task config.
  repeated TaskConfig default_task_config = 5;
}
