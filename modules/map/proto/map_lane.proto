syntax = "proto2";

package apollo.hdmap;

import "modules/map/proto/map_geometry.proto";
import "modules/map/proto/map_id.proto";

message LaneBoundaryType {
  enum Type {
    UNKNOWN = 0;
    DOTTED_YELLOW = 1;
    DOTTED_WHITE = 2;
    SOLID_YELLOW = 3;
    SOLID_WHITE = 4;
    DOUBLE_YELLOW = 5;
    CURB = 6;
    // HIGH-hard to cross, LOW-easy to cross.
    // the quantitative demarcation is about 60 cm.
    LOW_ISOLATION_FENCE = 7;
    HIGH_ISOLATION_FENCE = 8;
    POST_FENCE = 9;
  };
  // Offset relative to the starting point of boundary
  optional double s = 1;
  // support multiple types
  repeated Type types = 2;
}

message LaneBoundary {
  optional Curve curve = 1;

  enum Type {
    UNKNOWN = 0;
    DOTTED_YELLOW = 1;
    DOTTED_WHITE = 2;
    SOLID_YELLOW = 3;
    SOLID_WHITE = 4;
    DOUBLE_YELLOW = 5;
    CURB = 6;
  };
  optional Type type = 2; // deprecated
  optional double length = 3;
  // indicate whether the lane boundary exists in real world
  optional bool virtual = 4;
  // in ascending order of s
  repeated LaneBoundaryType boundary_type = 5;
}

// Association between central point to closest boundary.
message LaneSampleAssociation {
  optional double s = 1;
  optional double width = 2;
}

// A lane is part of a roadway, that is designated for use by a single line of vehicles.
// Most public roads (include highways) have more than two lanes.
message Lane {
  optional Id id = 1;

  enum LaneType {
    NONE = 1;
    HIGHWAY_DRIVING = 2;
    CITY_DRIVING = 3;
    SHOULDER = 4;
    BIKING = 5;
    SIDEWALK = 6;
    BORDER = 7;
    RESTRICTED = 8;
    PARKING = 9;
    BIDIRECTIONAL = 10;
    MEDIAN = 11;
    ROADWORKS = 12;
    TRAM = 13;
    TAIL = 14;
    //ENTRY = 15;
    //EXIT = 16;
    OFFRAMP = 17;
    ONRAMP = 18;
    LEFT_TURN_WAITING_ZONE = 19;
  };
  optional LaneType type = 13;

  enum LaneTurn {
    NO_TURN = 1;
    LEFT_TURN = 2;
    RIGHT_TURN = 3;
    U_TURN = 4;
  };
  optional LaneTurn turn = 14;

  // Central lane as reference trajectory, not necessary to be the geometry central.
  optional Curve central_curve = 2;

  // Lane boundary curve.
  optional LaneBoundary left_boundary = 3;
  optional LaneBoundary right_boundary = 4;

  // Only used if boundary curves are not available, in meters.
  optional double width = 5;
  optional double length = 6;

  // Speed limit of the lane, in meters per second.
  optional double speed_limit = 7;

  repeated Id overlap_id = 8;

  // All lanes can be driving into (or from).
  repeated Id predecessor_id = 9;
  repeated Id successor_id = 10;

  // Neighbor lanes on the same direction.
  repeated Id left_neighbor_forward_lane_id = 11;
  repeated Id right_neighbor_forward_lane_id = 12;

  repeated Id left_neighbor_reverse_lane_id = 15;
  repeated Id right_neighbor_reverse_lane_id = 16;

  repeated Id stop_sign_id = 17;
  // if lane is not in the junction, junction id is null.
  optional Id junction_id = 18;
  repeated Id crosswalk_id = 19;
  repeated Id yield_sign_id = 20;
  repeated Id clear_area_id = 23;
  // Association between central point to closest boundary.
  repeated LaneSampleAssociation left_sample = 21;
  repeated LaneSampleAssociation right_sample = 22;
  enum LaneTurnTypePlan {
    TTP_NO_TURN = 1;
    TTP_LEFT_TURN = 2;
    TTP_RIGHT_TURN = 3;
    TTP_U_TURN = 4;
    TTP_LEFT_AND_NO_TURN = 5;
    TTP_LEFT_AND_U_TURN = 6;
    TTP_U_AND_NO_TURN = 7;
    TTP_RIGHT_AND_NO_TURN = 8;
    TTP_LEFT_AND_U_AND_NO_TURN = 9;
    TTP_UNKNOWN = 10;
  };
  // turn type of successor lane.
  optional LaneTurnTypePlan turn_type_plan = 24;

  // Alternative lane when the adjacent lane is occupied for a long time,
  // which is always violate the traffic rules
  optional bool is_backup = 25;

  enum LaneDirection {
    FORWARD = 1;
    BACKWARD = 2;
    BIDIRECTION = 3;
  }
  optional LaneDirection direction = 26;
}

